// Code generated by ragel
// @generated
//line arg.rl:1
package argparser

import "fmt"

//line arg.go:10
const envvar_start int = 1
const envvar_first_final int = 8
const envvar_error int = 0

const envvar_en_main int = 1

//line arg.rl:9

// Var is the parsed envvar string.
type Var struct {
	Name  string
	Value string
}

// Parse parses strings in the format, ${NAME} and ${NAME:VALUE}.
func Parse(data string) (Var, error) {
	var (
		// Ragel variables
		cs = 0
		p  = 0
		pe = len(data)

		// variable name
		nameStart = -1
		nameEnd   = -1

		// default value
		valueStart = -1
		valueEnd   = -1
	)

//line arg.go:45
	{
		cs = envvar_start
	}

//line arg.go:50
	{
		if p == pe {
			goto _test_eof
		}
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 4:
			goto st_case_4
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 8:
			goto st_case_8
		}
		goto st_out
	st_case_1:
		if data[p] == 36 {
			goto st2
		}
		goto st0
	st_case_0:
	st0:
		cs = 0
		goto _out
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
		if data[p] == 123 {
			goto st3
		}
		goto st0
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
		if data[p] == 95 {
			goto tr3
		}
		switch {
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr3
			}
		case data[p] >= 65:
			goto tr3
		}
		goto st0
	tr3:
//line arg.rl:37
		nameStart = p
//line arg.rl:38
		nameEnd = p + 1
		goto st4
	tr5:
//line arg.rl:38
		nameEnd = p + 1
		goto st4
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
//line arg.go:126
		switch data[p] {
		case 46:
			goto st5
		case 58:
			goto st6
		case 95:
			goto tr5
		case 125:
			goto st8
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr5
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr5
			}
		default:
			goto tr5
		}
		goto st0
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		if data[p] == 95 {
			goto tr5
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr5
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr5
			}
		default:
			goto tr5
		}
		goto st0
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		if data[p] == 125 {
			goto st0
		}
		goto tr8
	tr8:
//line arg.rl:43
		valueStart = p
//line arg.rl:44
		valueEnd = p + 1
		goto st7
	tr9:
//line arg.rl:44
		valueEnd = p + 1
		goto st7
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
//line arg.go:195
		if data[p] == 125 {
			goto st8
		}
		goto tr9
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
		goto st0
	st_out:
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof7:
		cs = 7
		goto _test_eof
	_test_eof8:
		cs = 8
		goto _test_eof

	_test_eof:
		{
		}
	_out:
		{
		}
	}

//line arg.rl:51

	if cs < 8 {
		return Var{}, fmt.Errorf("%q is not in the form ${NAME} or ${NAME:DEFAULT}. e.g., ${name:John Smith}", data)
	}

	name := data[nameStart:nameEnd]
	var value string
	if valueStart > 0 {
		value = data[valueStart:valueEnd]
	}

	return Var{Name: name, Value: value}, nil
}
