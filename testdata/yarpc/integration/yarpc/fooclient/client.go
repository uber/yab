// Code generated by thriftrw-plugin-yarpc
// @generated

package fooclient

import (
	"github.com/yarpc/yab/testdata/yarpc/integration/service/foo"
	"golang.org/x/net/context"
	"go.uber.org/thriftrw/protocol"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc/transport"
	"go.uber.org/yarpc"
	"go.uber.org/thriftrw/wire"
)

// Interface is a client for the Foo service.
type Interface interface {
	Bar(
		ctx context.Context,
		reqMeta yarpc.CallReqMeta,
		Arg *int32,
	) (int32, yarpc.CallResMeta, error)
}

// New builds a new client for the Foo service.
//
// 	client := fooclient.New(dispatcher.Channel("foo"))
func New(c transport.Channel, opts ...thrift.ClientOption) Interface {
	return client{c: thrift.New(thrift.Config{
		Service:  "Foo",
		Channel:  c,
		Protocol: protocol.Binary,
	}, opts...)}
}

type client struct{ c thrift.Client }

func (c client) Bar(
	ctx context.Context,
	reqMeta yarpc.CallReqMeta,
	_Arg *int32,
) (success int32, resMeta yarpc.CallResMeta, err error) {
	args := foo.BarHelper.Args(_Arg)

	var body wire.Value
	body, resMeta, err = c.c.Call(ctx, reqMeta, args)
	if err != nil {
		return
	}

	var result foo.BarResult
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = foo.BarHelper.UnwrapResponse(&result)
	return
}
