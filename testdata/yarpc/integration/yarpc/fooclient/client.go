// Code generated by thriftrw
// @generated

package fooclient

import (
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
	"github.com/yarpc/yab/testdata/yarpc/integration/service/foo"
	yarpc "github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	"github.com/yarpc/yarpc-go/transport"
)

type Interface interface {
	Bar(reqMeta yarpc.CallReqMeta, arg *int32) (int32, yarpc.CallResMeta, error)
}

func New(c transport.Channel, opts ...thrift.ClientOption) Interface {
	return client{c: thrift.New(thrift.Config{Service: "Foo", Channel: c, Protocol: protocol.Binary}, opts...)}
}

type client struct{ c thrift.Client }

func (c client) Bar(reqMeta yarpc.CallReqMeta, arg *int32) (success int32, resMeta yarpc.CallResMeta, err error) {
	args := foo.BarHelper.Args(arg)
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result foo.BarResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = foo.BarHelper.UnwrapResponse(&result)
	return
}
