// @generated Code generated by thrift-gen. Do not modify.

// Package integration is generated code used to make or handle TChannel calls using Thrift.
package integration

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

// TChanFoo is the interface that defines the server handler and client interface.
type TChanFoo interface {
	Bar(ctx thrift.Context, arg int32) (int32, error)
}

// Implementation of a client and service handler.

type tchanFooClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanFooInheritedClient(thriftService string, client thrift.TChanClient) *tchanFooClient {
	return &tchanFooClient{
		thriftService,
		client,
	}
}

// NewTChanFooClient creates a client that can be used to make remote calls.
func NewTChanFooClient(client thrift.TChanClient) TChanFoo {
	return NewTChanFooInheritedClient("Foo", client)
}

func (c *tchanFooClient) Bar(ctx thrift.Context, arg int32) (int32, error) {
	var resp FooBarResult
	args := FooBarArgs{
		Arg: arg,
	}
	success, err := c.client.Call(ctx, c.thriftService, "bar", &args, &resp)
	if err == nil && !success {
		if e := resp.NotFound; e != nil {
			err = e
		}
	}

	return resp.GetSuccess(), err
}

type tchanFooServer struct {
	handler TChanFoo
}

// NewTChanFooServer wraps a handler for TChanFoo so it can be
// registered with a thrift.Server.
func NewTChanFooServer(handler TChanFoo) thrift.TChanServer {
	return &tchanFooServer{
		handler,
	}
}

func (s *tchanFooServer) Service() string {
	return "Foo"
}

func (s *tchanFooServer) Methods() []string {
	return []string{
		"bar",
	}
}

func (s *tchanFooServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "bar":
		return s.handleBar(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanFooServer) handleBar(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req FooBarArgs
	var res FooBarResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.Bar(ctx, req.Arg)

	if err != nil {
		switch v := err.(type) {
		case *NotFound:
			if v == nil {
				return false, nil, fmt.Errorf("Handler for notFound returned non-nil error type *NotFound but nil value")
			}
			res.NotFound = v
		default:
			return false, nil, err
		}
	} else {
		res.Success = &r
	}

	return err == nil, &res, nil
}
